# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GBftoJkgtGf1mG1iKU4e2qjp33jyFfw1
"""



import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Step 1: Load the Dataset
file_path = '/content/gretel_generated_table_2024-09-09-09-22-41.csv'  # Replace with your actual file path
movie_data = pd.read_csv(file_path)

# Display the first few rows of the dataset
print("Sample of the dataset:")
print(movie_data.head())

# Display the column names of the dataset
print("\nColumn names in the dataset:")
print(movie_data.columns)

# Check column names and adjust code if necessary
def get_column_name(df, expected_name):
    for col in df.columns:
        if col.strip().lower() == expected_name.strip().lower():
            return col
    raise KeyError(f"Column '{expected_name}' not found in the dataset.")

# Step 2: Movie Details by Name
def view_movie_details(movie_name):
    movie_title_col = get_column_name(movie_data, 'Movie title')
    rating_col = get_column_name(movie_data, 'Rating')
    genre_col = get_column_name(movie_data, 'Genre')
    review_col = get_column_name(movie_data, 'Review')

    movie = movie_data[movie_data[movie_title_col].str.contains(movie_name, case=False, na=False)]
    if not movie.empty:
        for index, row in movie.iterrows():
            print(f"\nDetails for '{row[movie_title_col]}':")
            print(f"Rating: {row[rating_col]}/10")
            print(f"Genre: {row[genre_col]}")
            print(f"Review: {row[review_col]}")
    else:
        print(f"'{movie_name}' not found in the dataset.")

# Step 3: List Movies by Year
def list_movies_by_year(year):
    year_col = get_column_name(movie_data, 'Year')
    movie_title_col = get_column_name(movie_data, 'Movie title')

    movies = movie_data[movie_data[year_col] == year]
    if not movies.empty:
        print(f"\nMovies released in {year}:")
        print(movies[[movie_title_col]])
    else:
        print(f"No movies found for the year {year}.")

# Step 4: Table Chart with Movie and Director
def plot_movie_director_table():
    movie_title_col = get_column_name(movie_data, 'Movie title')
    director_col = get_column_name(movie_data, 'Director')

    plt.figure(figsize=(12, 8))
    movie_director_df = movie_data[[movie_title_col, director_col]].drop_duplicates()
    movie_director_df = movie_director_df.reset_index(drop=True)
    ax = plt.gca()
    ax.axis('off')
    table = plt.table(cellText=movie_director_df.values,
                      colLabels=movie_director_df.columns,
                      cellLoc='center',
                      loc='center')
    plt.title('Movie and Director')
    plt.show()

# Step 5: Treemap for Movie vs Highest Gross
def plot_movie_highest_gross_treemap():
    movie_title_col = get_column_name(movie_data, 'Movie title')
    highest_gross_col = get_column_name(movie_data, 'Highest Gross')

    highest_gross_df = movie_data[[movie_title_col, highest_gross_col]]
    highest_gross_df[highest_gross_col] = pd.to_numeric(highest_gross_df[highest_gross_col], errors='coerce')
    highest_gross_df = highest_gross_df.dropna()

    fig = px.treemap(highest_gross_df,
                     path=[movie_title_col],
                     values=highest_gross_col,
                     color=highest_gross_col,
                     color_continuous_scale='viridis',
                     title='Movies vs Highest Gross Treemap')
    fig.show()

# Step 6: Line Chart for Movie vs Rating
def plot_movie_rating_line_chart():
    movie_title_col = get_column_name(movie_data, 'Movie title')
    rating_col = get_column_name(movie_data, 'Rating')

    plt.figure(figsize=(14, 7))
    movie_rating_df = movie_data[[movie_title_col, rating_col]]
    movie_rating_df[rating_col] = pd.to_numeric(movie_rating_df[rating_col], errors='coerce')
    movie_rating_df = movie_rating_df.dropna()

    # Sorting the DataFrame for better line chart plotting
    movie_rating_df = movie_rating_df.sort_values(by=rating_col, ascending=False)

    plt.plot(movie_rating_df[movie_title_col], movie_rating_df[rating_col], marker='o', linestyle='-', color='b')
    plt.xticks(rotation=90)  # Rotate movie titles for better readability
    plt.xlabel('Movie Title')
    plt.ylabel('Rating')
    plt.title('Movies vs Rating Line Chart')
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Interactive User Input
def interactive_menu():
    while True:
        print("\nInteractive Menu:")
        print("1. View Movie Details by Name")
        print("2. List Movies by Year")
        print("3. Plot Movie vs Director Table")
        print("4. Plot Treemap for Movie vs Highest Gross")
        print("5. Plot Line Chart for Movie vs Rating")
        print("6. Exit")

        choice = input("Enter your choice (1-6): ")

        if choice == '1':
            movie_name = input("Enter the movie name: ")
            view_movie_details(movie_name)
        elif choice == '2':
            try:
                year = int(input("Enter the year: "))
                list_movies_by_year(year)
            except ValueError:
                print("Invalid year. Please enter a numeric value.")
        elif choice == '3':
            plot_movie_director_table()
        elif choice == '4':
            plot_movie_highest_gross_treemap()
        elif choice == '5':
            plot_movie_rating_line_chart()
        elif choice == '6':
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 6.")

# Run interactive menu
interactive_menu()